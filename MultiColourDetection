/**
 * MultipleColorTracking
 * Select 4 colors to track them separately
 *
 * It uses the OpenCV for Processing library by Greg Borenstein
 * https://github.com/atduskgreg/opencv-processing
 *
 * @author: Jordi Tost (@jorditost)
 * @url: https://github.com/jorditost/ImageFiltering/tree/master/MultipleColorTracking
 *
 * University of Applied Sciences Potsdam, 2014
 *
 * Instructions:
 * Press one numerical key [1-4] and click on one color to track it
 */
 
import gab.opencv.*;
import processing.video.*;
import java.awt.Rectangle;

Capture video,cam;
OpenCV opencv;
PImage src;
ArrayList<Contour> contours;

// <1> Set the range of Hue values for our filter
//ArrayList<Integer> colors;
int maxColors = 6;
int[] hues;
int[] colors;
int rangeWidth = 10;

PImage[] outputs;

//int colorToChange = 6;
int colorToChange=0;
void setup() {
  size(640, 480);
  noFill();
  String[] cameras = Capture.list();
  
  if (cameras.length == 0) {
    println("There are no cameras available for capture.");
    exit();
  } else {
    println("Available cameras:");
    for (int i = 0; i < cameras.length; i++) {
      println(cameras[i]);
    }
  }      
 // video = new Capture(this, "name=/dev/video1,size=640x480,fps=30");
  video = new Capture(this,640,480);
  
  opencv = new OpenCV(this, 640,480);
  video.start();
  contours = new ArrayList<Contour>();
  
  
  
  // Array for detection colors
  colors = new int[maxColors];
  hues = new int[maxColors];
  
  outputs = new PImage[maxColors];
  
  
}

void draw() {
  
  background(150);
  
  if (video.available()) {
    video.read();
    
  }

  // <2> Load the new frame of our movie in to OpenCV
  opencv.loadImage(video);
  
  // Tell OpenCV to use color information
  opencv.useColor();
  src = opencv.getSnapshot();
  
  // <3> Tell OpenCV to work in HSV color space.
  opencv.useColor(HSB);
  
  detectColors();
  
  // Show images
  image(src, 0, 0);
  for (int i=0; i<outputs.length; i++) {
    if (outputs[i] != null) {
      image(outputs[i], width-src.width/6, i*src.height/6, src.width/6, src.height/6);
      
      noStroke();
      fill(colors[i]);
      rect(src.width, i*src.height/6, 20, src.height/6);
    }
  }
  
  // Print text if new color expected
  textSize(20);
  stroke(255);
  fill(255);
  
  if (colorToChange < 1) {
    text("Click on screen to display color tracking ", 10, 25);
    text("Red,Yellow,Orange,Blue,Green,White", 10, 45);
  }
  
  displayContoursBoundingBoxes();
}

//////////////////////
// Detect Functions
//////////////////////

void detectColors() {
    
  for (int i=0; i<hues.length; i++) {
    
    if (hues[i] <= 0) continue;
    
    opencv.loadImage(src);
    opencv.useColor(HSB);
    
    // <4> Copy the Hue channel of our image into 
    //     the gray channel, which we process.
    opencv.setGray(opencv.getH().clone());
    
    int hueToDetect = hues[i];
    //println("index " + i + " - hue to detect: " + hueToDetect);
    
    // <5> Filter the image based on the range of 
    //     hue values that match the object we want to track.
    opencv.inRange(hueToDetect-rangeWidth/2, hueToDetect+rangeWidth/2);
    
    //opencv.dilate();
    opencv.erode();
    
    // TO DO:
    // Add here some image filtering to detect blobs better
    
    // <6> Save the processed image for reference.
    outputs[i] = opencv.getSnapshot();
  
  
  // <7> Find contours in our range image.
  //     Passing 'true' sorts them by descending area.
  if (outputs[i] != null) {
    
    opencv.loadImage(outputs[i]);
    
    contours = opencv.findContours(true,true);
  }}
}

void displayContoursBoundingBoxes() {
  
  for (int i=0; i<contours.size(); i++) {
    
    Contour contour = contours.get(i);
    Rectangle r = contour.getBoundingBox();
    
    if (r.width < 20 || r.height < 20)
      continue;
    
    stroke(255, 0, 0);
    fill(255, 0, 0, 150);
    strokeWeight(2);
    rect(r.x, r.y, r.width, r.height);
   // println("contour coordinates: "+ r.x +" " + r.y);
  }
}

//////////////////////
// Keyboard / Mouse
//////////////////////

void mousePressed() {
    
  for(int colorToChange=0 ;colorToChange<6;colorToChange++) {
    
   
   color[] c = new color[6];
   c[0] = color(156,46,55);   //red
    c[1] = color(172,158,90); //yellow
    c[2] = color(182,94,49);  //orange
    c[3] = color(0,113,2412);   //blue
    c[4] = color(36,159,88);   //green
    c[5] = color(157,163,196222);  //white
    int hue = int(map(hue(c[colorToChange]), 0, 255, 0, 180));
    colors[colorToChange] = c[colorToChange];
    
    //color c = get(mouseX, mouseY);
    //println("r: " + red(c) + " g: " + green(c) + " b: " + blue(c));
    //int hue = int(map(hue(c), 0, 255, 0, 180));
    //colors[colorToChange] = c;
    
    hues[colorToChange] = hue;
    
    println("color index " + (colorToChange) + ", value: " + hue);
    
  }
}
